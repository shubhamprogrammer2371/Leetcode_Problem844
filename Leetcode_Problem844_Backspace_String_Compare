bool backspaceCompare( const char * const str1, const char * const str2)
{
	struct 
    {
		const char * str;
		int idx;
		int bsCnt;
	} strIters[2] = {
		{str1, strlen(str1) - 1, 0},
		{str2, strlen(str2) - 1, 0}
	};

	for (; 1; strIters[0].idx--, strIters[1].idx--)
    {
		for (int i = 0; i < 2; i++)
        {
			for (; strIters[i].idx >= 0; strIters[i].idx--)
            {
				if ('#' == strIters[i].str[strIters[i].idx])
					strIters[i].bsCnt++;
				else if (strIters[i].bsCnt > 0)
					strIters[i].bsCnt--;
				else 
					break;
			}
		}
		if (-1 == strIters[0].idx && -1 == strIters[1].idx)
			break;
		if (!((strIters[0].idx >= 0 && strIters[1].idx >= 0) && strIters[0].str[strIters[0].idx] == strIters[1].str[strIters[1].idx]))
			return 0;
	}
	return 1;
}



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int MAX_1 = 0 , MAX_2 = 0 , top_1 = -1 , top_2 = -1;
char *stack_1 = 0 , *stack_2 = 0;

int isfull(int cho)
{
  if(cho == 1)
    return MAX_1 == top_1 ? 1 : 0;
  else if(cho == 2)
    return MAX_2 == top_2 ? 1 : 0;
  return 0;
}

int isempty(int cho)
{
  if(cho == 1)
    return top_1 == -1 ? 1 : 0;
  else if(cho == 2)
    return top_2 == -1 ? 1 : 0;
  return 0;
}


void push(char *stack, char data, int cho){
    if(cho == 1)
    {
        if(data != '#')
        {
            if(!isfull(cho))
                stack[++top_1] = data;
        } 
        else 
        {
            if(!isempty(cho))
                pop(stack,cho);
        }
    }
    else if(cho == 2)
    {
        if(data != '#')
           stack[++top_2] = data;
        else
           pop(stack,cho);
    }
}

void pop(char *stack, int cho)
{
    if(cho == 1)
    {
        if(!isempty(cho))
            stack[top_1--] = '\0';
    }
    else if(cho == 2)
    {
        if(!isempty(cho))
            stack[top_2--] = '\0';
    }
}

bool backspaceCompare(char * s, char * t){
    free(stack_1);
    free(stack_2);
    MAX_1 = MAX_2 = 0;
    top_1 = top_2 = -1;
    MAX_1 = strlen(s);
    MAX_2 = strlen(t);
    
    stack_1 = (char*)calloc(MAX_1 + 1,sizeof(char));
    stack_2 = (char*)calloc(MAX_2 + 1,sizeof(char));
    
    while(*s || *t)
    {
        if(*s != '\0')
        {
            push(stack_1,*s,1);
            s++;
        }
        if(*t != '\0')
        {
            push(stack_2,*t,2);
            t++;
        }
    }
    MAX_1 = top_1;
    MAX_2 = top_2;
    if(MAX_1 > -1 && MAX_2 > -1)
        return !(strcmp(stack_2,stack_1)) ? 1 : 0;
    else if(MAX_1 == -1 && MAX_2 == -1)
        return 1;
  return 0;
}



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


char* afterBlank(char * c)
{
    int i = 0 , j = 0;
    while(c[i])
    {
        if(c[i] == '#')
            j = (j > 0) ? j - 1 : 0;
        else 
            c[j++] = c[i];
        i++;
    }
    c[j] = '\0';
    return c;
}
bool backspaceCompare(char * s, char * t){
    return !(strcmp(afterBlank(s),afterBlank(t)));
}
